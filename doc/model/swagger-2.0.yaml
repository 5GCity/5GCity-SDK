swagger: '2.0'
info:
  description: REST API for the 5GCity's SDK
  version: '1.0'
  title: '5GCity SDK REST API '
  contact:
    name: Nextworks S.r.l.
    url: 'http://www.nextworks.it'
    email: info@nextworks.it
  license:
    name: Apache License Version 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0"'
host: 'localhost:8081'
basePath: /
tags:
  - name: function-controller
    description: Operations on SDK - SDK Function APIs
  - name: service-controller
    description: Operations on SDK - SDK Service APIs
  - name: service-descriptors-controller
    description: Operations on SDK - SDK Service Descriptor APIs
  - name: slice-controller
    description: Operations on SDK - SDK Slice Management APIs
paths:
  /sdk/functions/:
    get:
      tags:
        - function-controller
      summary: Get the complete list of SDK Functions available in database
      operationId: getFunctionsUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: query
          description: sliceId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SdkFunction'
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Slice not found
      deprecated: false
    post:
      tags:
        - function-controller
      summary: Create a new SDK Function
      operationId: createFunctionUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/SdkFunction'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: SDK Function created
          schema:
            type: object
        '400':
          description: SDK Function already present in database or function cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Slice not found
      deprecated: false
    put:
      tags:
        - function-controller
      summary: Modify an existing SDK Function
      operationId: updateFunctionUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/SdkFunction'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '204':
          description: SDK Function updated
          schema:
            type: object
        '400':
          description: SDK Function cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function not present in database or slice not found
        '409':
          description: SDK Function cannot be updated
      deprecated: false
  '/sdk/functions/{functionId}':
    get:
      tags:
        - function-controller
      summary: Search a SDK Function with ID
      operationId: getFunctionUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SdkFunction'
        '400':
          description: Query without parameter functionId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function not found in database or slice not found
      deprecated: false
    delete:
      tags:
        - function-controller
      summary: Delete a SDK Function from database
      operationId: deleteFunctionUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: SDK Function deleted
          schema:
            type: object
        '400':
          description: Deletion request without parameter functionId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function not present in database
        '409':
          description: SDK Function cannot be deleted
      deprecated: false
  '/sdk/functions/{functionId}/monitoring_params':
    get:
      tags:
        - function-controller
      summary: Get the list of  Monitoring Parameters for a SDK Function with ID
      operationId: getMonitoringParametersForFunctionUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MonitoringParameter'
        '400':
          description: Query without parameter functionId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function or Monitoring Parameters not present in database
      deprecated: false
    put:
      tags:
        - function-controller
      summary: Modify an existing list of monitoring parameters related to a SDK Function
      operationId: updateMonitoringParametersForFunctionUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
        - in: body
          name: monitoringParameters
          description: monitoringParameters
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/MonitoringParameter'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '204':
          description: Monitoring Parameters updated
          schema:
            type: object
        '400':
          description: SDK Function or Monitoring Parameters cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function or Monitoring Parameters not present in database
        '409':
          description: Monitoring Parameters cannot be updated
      deprecated: false
  '/sdk/functions/{functionId}/monitoring_params/{monitoringParameterId}':
    delete:
      tags:
        - function-controller
      summary: Delete Monitoring Parameters from SDK Function
      operationId: deleteMonitoringParametersForFunctionUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
        - name: monitoringParameterId
          in: path
          description: monitoringParameterId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: Monitoring parameter deleted
          schema:
            type: object
        '400':
          description: Deletion request without parameter functionId or function cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function or Monitoring Parameters not present in database
        '409':
          description: Monitoring Parameters cannot be deleted
      deprecated: false
  '/sdk/functions/{functionId}/publish':
    post:
      tags:
        - function-controller
      summary: Publish SDK Function to Public Catalogue
      operationId: publishFunctionUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '202':
          description: Virtual Network Function descriptor created. The descriptor will be published to the Public Catalogue
          schema:
            type: object
        '400':
          description: Publish request without parameter functionId or SDK Function already published
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function not present in database
      deprecated: false
  '/sdk/functions/{functionId}/unpublish':
    post:
      tags:
        - function-controller
      summary: Unpublish SDK Function from Public Catalogue
      operationId: unPublishFunctionUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '202':
          description: SDK Function will be removed from the Public Catalogue
          schema:
            type: object
        '400':
          description: Unpublish request without parameter functionId or SDK Function not yet published
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Function not present in database
        '409':
          description: SDK Function cannot be unpublished
      deprecated: false
  '/sdk/functions/{functionId}/vnfd':
    get:
      tags:
        - function-controller
      summary: Get Vnfd from SDK Function
      operationId: getVnfdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: functionId
          in: path
          description: functionId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '400':
          description: SDK Function not present in databse
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Not Found
      deprecated: false
  /sdk/service_descriptor/:
    get:
      tags:
        - service-descriptors-controller
      summary: Get all SDK Service Descriptors
      operationId: getAllDescriptorUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: query
          description: sliceId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SdkServiceDescriptor'
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Not Found
      deprecated: false
  '/sdk/service_descriptor/{serviceDescriptorId}':
    get:
      tags:
        - service-descriptors-controller
      summary: Get SDK Service Descriptor with ID
      operationId: getDescriptorUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceDescriptorId
          in: path
          description: serviceDescriptorId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SdkServiceDescriptor'
        '400':
          description: Query without parameter serviceDescriptorId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service Descriptor not present in database
      deprecated: false
    delete:
      tags:
        - service-descriptors-controller
      summary: Delete SDK Service Descriptor from database
      operationId: deleteDescriptorUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceDescriptorId
          in: path
          description: serviceDescriptorId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: SDK Service Descriptor deleted
          schema:
            type: object
        '400':
          description: Deletion request without parameter serviceDescriptorId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service Descriptor not present in database
        '409':
          description: SDK Service Descriptor cannot be deleted
      deprecated: false
  '/sdk/service_descriptor/{serviceDescriptorId}/nsd':
    get:
      tags:
        - service-descriptors-controller
      summary: Get NSD from SDK Service Descriptor
      operationId: getDescriptorNsdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceDescriptorId
          in: path
          description: serviceDescriptorId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '400':
          description: Network Service Descriptor cannot be retrived
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service Descriptor not present in database
      deprecated: false
  '/sdk/service_descriptor/{serviceDescriptorId}/publish':
    post:
      tags:
        - service-descriptors-controller
      summary: Publish SDK Service to Public Catalogue
      operationId: publishServiceUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceDescriptorId
          in: path
          description: serviceDescriptorId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '202':
          description: Network Service descriptor created. The descriptor will be published to the Public Catalogue
          schema:
            type: object
        '400':
          description: Publish request without parameter serviceDescriptorId or SDK Service already published
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service Descriptor not present in database
        '409':
          description: Not all components are published to the Public Catalogue
      deprecated: false
  '/sdk/service_descriptor/{serviceDescriptorId}/unpublish':
    post:
      tags:
        - service-descriptors-controller
      summary: Unpublish SDK Service from Public Catalogue
      operationId: unPublishServiceUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceDescriptorId
          in: path
          description: serviceDescriptorId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '202':
          description: The SDK Service will be removed from the Public Catalogue
          schema:
            type: object
        '400':
          description: Publish request without parameter serviceDescriptorId or SDK Service not yet published
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service Descriptor not present in database
      deprecated: false
  /sdk/services/:
    get:
      tags:
        - service-controller
      summary: Get the complete list of SDK Services available in database
      operationId: getServicesUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: query
          description: sliceId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SdkService'
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Slice not found
      deprecated: false
    post:
      tags:
        - service-controller
      summary: Create a new SDK Service
      operationId: createServiceUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/SdkService'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: SDK Service created
          schema:
            type: object
        '400':
          description: SDK Service already present in database
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service cannot be validated (some component is missing) or slice not found
      deprecated: false
    put:
      tags:
        - service-controller
      summary: Modify an existing SDK Service
      operationId: updateServiceUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/SdkService'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '204':
          description: SDK Service updated
          schema:
            type: object
        '400':
          description: SDK Service cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service not present in database or slice not found
        '409':
          description: SDK Service cannot be updated
      deprecated: false
  '/sdk/services/service/{serviceId}/publish':
    post:
      tags:
        - service-controller
      summary: Publish SDK Service to Public Catalogue
      operationId: publishServiceUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: makeDescriptorRequest
          description: makeDescriptorRequest
          required: true
          schema:
            $ref: '#/definitions/MakeDescriptorRequest'
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '202':
          description: Network Service descriptor created. The descriptor will be published to the Public Catalogue
          schema:
            type: object
        '400':
          description: Publish request without parameter serviceId or provided parameters cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service not present in database
        '409':
          description: Not all components are published to the Public Catalogue
      deprecated: false
  '/sdk/services/{serviceId}':
    get:
      tags:
        - service-controller
      summary: Search a SDK Service with ID
      operationId: getServiceUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SdkService'
        '400':
          description: Query without parameter serviceId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SdkService not found in database
      deprecated: false
    delete:
      tags:
        - service-controller
      summary: Delete a SDK Service from database
      operationId: deleteServiceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: SDK Service deleted
          schema:
            type: object
        '400':
          description: Deletion request without parameter serviceId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service not present in database
        '409':
          description: SDK Service cannot be deleted
      deprecated: false
  '/sdk/services/{serviceId}/create_descriptor':
    post:
      tags:
        - service-controller
      summary: Create descriptor for SDK Service
      operationId: createDescriptorUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: makeDescriptorRequest
          description: makeDescriptorRequest
          required: true
          schema:
            $ref: '#/definitions/MakeDescriptorRequest'
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: SDK Service Descriptor created
          schema:
            type: object
        '400':
          description: Create descriptor request without serviceId or provided parameters cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service not found
      deprecated: false
  '/sdk/services/{serviceId}/monitoring_params':
    get:
      tags:
        - service-controller
      summary: Get the list of  Monitoring Parameters for a SDK Service with ID
      operationId: getMonitoringParametersForServiceUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MonitoringParameterWrapper'
        '400':
          description: Query without parameter serviceId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service or Monitoring Parameters not present in database
      deprecated: false
    put:
      tags:
        - service-controller
      summary: Modify an existing list of monitoring parameters related to a SDK Service
      operationId: updateMonitoringParametersForServiceUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: monitoringParameters
          description: monitoringParameters
          required: true
          schema:
            $ref: '#/definitions/MonitoringParameterWrapper'
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '204':
          description: Monitoring Parameters updated
          schema:
            type: object
        '400':
          description: SDK Service or Monitoring Parameters cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service or Monitoring Parameters not present in database
        '409':
          description: Monitoring Parameters cannot be updated
      deprecated: false
  '/sdk/services/{serviceId}/monitoring_params/{monitoringParameterId}':
    delete:
      tags:
        - service-controller
      summary: Delete monitoring param from SDK Service
      operationId: deleteMonitoringParametersForServiceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: monitoringParameterId
          in: path
          description: monitoringParameterId
          required: true
          type: integer
          format: int64
        - name: serviceId
          in: path
          description: serviceId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: Monitoring Parameter deleted
          schema:
            type: object
        '400':
          description: Deletion request without parameter serviceId or service cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: SDK Service or Monitoring Parameter not present in database
        '409':
          description: Monitoring Parameter cannot be deleted
      deprecated: false
  /sdk/sliceManagement/slices:
    get:
      tags:
        - slice-controller
      summary: Get the complete list of slices available in database or get the list of slices for a user
      operationId: getSlicesUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: user
          in: query
          description: user
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SliceResource'
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - slice-controller
      summary: Create a new Slice on the SDK and a Project on the Public Catalogue
      operationId: createSliceUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - in: body
          name: slice
          description: slice
          required: true
          schema:
            $ref: '#/definitions/SliceResource'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Slice created
          schema:
            type: object
        '400':
          description: Slice already present in database or slice cannot be validated
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Not Found
        '500':
          description: Slice cannot be created on Public Catalogue
      deprecated: false
  '/sdk/sliceManagement/slices/{sliceId}':
    get:
      tags:
        - slice-controller
      summary: Search a Slice with ID
      operationId: getSliceUsingGET
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: path
          description: sliceId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SliceResource'
        '400':
          description: Query without parameter sliceId
        '401':
          description: Authorization header is missing or format not valid
        '403':
          description: Operation not permitted
        '404':
          description: Slice not found in database
      deprecated: false
    delete:
      tags:
        - slice-controller
      summary: Delete a slice from database
      operationId: deleteSliceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: path
          description: sliceId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Query without parameter sliceId
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Slice not found in database
        '409':
          description: Slice cannot be deleted
        '500':
          description: Slice cannot be deleted on Public Catalogue
      deprecated: false
  '/sdk/sliceManagement/slices/{sliceId}/users/{userName}':
    put:
      tags:
        - slice-controller
      summary: Add user to a slice
      operationId: addUserToSliceUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: path
          description: sliceId
          required: true
          type: string
        - name: userName
          in: path
          description: userName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Query without parameter sliceId or userName or user already present in the slice
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Slice not found in database or user not found in Keycloak
      deprecated: false
    delete:
      tags:
        - slice-controller
      summary: Delete user from a slice
      operationId: delUserFromSliceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: false
          type: string
        - name: sliceId
          in: path
          description: sliceId
          required: true
          type: string
        - name: userName
          in: path
          description: userName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Query without parameter sliceId or userName
        '401':
          description: User not authenticated
        '403':
          description: User not allowed to access the resource
        '404':
          description: Slice not found in database or user not found in the slice
      deprecated: false
definitions:
  ComponentAction:
    title: ComponentAction
    allOf:
      - $ref: '#/definitions/ServiceAction'
      - type: object
        properties:
          actionType:
            type: string
            enum:
              - SCALE_IN
              - SCALE_OUT
              - COMPONENT
          componentActionId:
            type: string
          componentIndex:
            type: string
          id:
            type: string
          name:
            type: string
        title: ComponentAction
  ConnectionPoint:
    type: object
    properties:
      componentIndex:
        type: integer
        format: int32
      cpType:
        type: string
        enum:
          - INTERNAL
          - EXTERNAL
      id:
        type: integer
        format: int64
      internalCpId:
        type: integer
        format: int64
      internalCpName:
        type: string
      isManagement:
        type: boolean
      name:
        type: string
      requiredPort:
        type: array
        items:
          type: integer
          format: int32
    title: ConnectionPoint
  L3Connectivity:
    type: object
    properties:
      connectionPointName:
        type: string
      id:
        type: integer
        format: int64
      l3Rules:
        type: array
        items:
          $ref: '#/definitions/L3ConnectivityRule'
    title: L3Connectivity
  L3ConnectivityRule:
    type: object
    properties:
      dstIp:
        type: string
      dstPort:
        type: integer
        format: int32
      protocol:
        type: string
        enum:
          - UDP
          - TCP
          - ICMP
      srcIp:
        type: string
      srcPort:
        type: integer
        format: int32
    title: L3ConnectivityRule
  License:
    type: object
    properties:
      type:
        type: string
        enum:
          - PRIVATE
          - PUBLIC
      url:
        type: string
    title: License
  Link:
    type: object
    properties:
      connectionPointNames:
        type: array
        items:
          type: string
      id:
        type: integer
        format: int64
      name:
        type: string
    title: Link
  MakeDescriptorRequest:
    type: object
    properties:
      parameterValues:
        type: array
        items:
          type: number
    title: MakeDescriptorRequest
  MonParamAggregated:
    title: MonParamAggregated
    allOf:
      - $ref: '#/definitions/MonitoringParameter'
      - type: object
        properties:
          aggregatorFunc:
            type: string
            enum:
              - sum
              - avg
              - min
              - max
              - stdev
          id:
            type: string
          name:
            type: string
          parameterType:
            type: string
            enum:
              - AGGREGATED
              - FUNCTION
              - IMPORTED
              - TRANSFORMED
          parametersName:
            type: array
            items:
              type: string
        title: MonParamAggregated
  MonParamFunction:
    title: MonParamFunction
    allOf:
      - $ref: '#/definitions/MonitoringParameter'
      - type: object
        properties:
          id:
            type: string
          metricName:
            type: string
          metricType:
            type: string
            enum:
              - APPLICATION
              - SYSTEM
          name:
            type: string
          parameterType:
            type: string
            enum:
              - AGGREGATED
              - FUNCTION
              - IMPORTED
              - TRANSFORMED
        title: MonParamFunction
  MonParamImported:
    title: MonParamImported
    allOf:
      - $ref: '#/definitions/MonitoringParameter'
      - type: object
        properties:
          componentIndex:
            type: integer
            format: int32
          id:
            type: string
          importedParameterId:
            type: string
          name:
            type: string
          parameterType:
            type: string
            enum:
              - AGGREGATED
              - FUNCTION
              - IMPORTED
              - TRANSFORMED
        title: MonParamImported
  MonParamTransformed:
    title: MonParamTransformed
    allOf:
      - $ref: '#/definitions/MonitoringParameter'
      - type: object
        properties:
          argumentList:
            type: array
            items:
              type: number
              format: double
          id:
            type: string
          name:
            type: string
          parameterType:
            type: string
            enum:
              - AGGREGATED
              - FUNCTION
              - IMPORTED
              - TRANSFORMED
          targetParameterName:
            type: string
          transform:
            type: string
            enum:
              - SUM_OVER_TIME
              - AVG_OVER_TIME
              - MIN_OVER_TIME
              - MAX_OVER_TIME
              - RATE_OVER_TIME
              - TRANSPOSE
              - MULTIPLY
              - DIVIDE
        title: MonParamTransformed
  MonitoringParameter:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      parameterType:
        type: string
        enum:
          - AGGREGATED
          - FUNCTION
          - IMPORTED
          - TRANSFORMED
    title: MonitoringParameter
  MonitoringParameterWrapper:
    type: object
    properties:
      extMonitoringParameters:
        type: array
        items:
          $ref: '#/definitions/MonitoringParameter'
      intMonitoringParameters:
        type: array
        items:
          $ref: '#/definitions/MonitoringParameter'
    title: MonitoringParameterWrapper
  RequiredPort:
    type: object
    properties:
      connectionPointName:
        type: string
      id:
        type: integer
        format: int64
      ports:
        type: array
        items:
          type: integer
          format: int32
    title: RequiredPort
  RuleCondition:
    type: object
    properties:
      comparator:
        type: string
        enum:
          - g
          - geq
          - l
          - leq
          - eq
      parameterName:
        type: string
      value:
        type: number
        format: double
    title: RuleCondition
  ScaleInAction:
    title: ScaleInAction
    allOf:
      - $ref: '#/definitions/ServiceAction'
      - type: object
        properties:
          actionType:
            type: string
            enum:
              - SCALE_IN
              - SCALE_OUT
              - COMPONENT
          componentIndex:
            type: string
          id:
            type: string
          name:
            type: string
          step:
            type: integer
            format: int32
        title: ScaleInAction
  ScaleOutAction:
    title: ScaleOutAction
    allOf:
      - $ref: '#/definitions/ServiceAction'
      - type: object
        properties:
          actionType:
            type: string
            enum:
              - SCALE_IN
              - SCALE_OUT
              - COMPONENT
          componentIndex:
            type: string
          id:
            type: string
          name:
            type: string
          step:
            type: integer
            format: int32
        title: ScaleOutAction
  SdkComponentInstance:
    type: object
    properties:
      type:
        type: string
        enum:
          - SDK_FUNCTION
          - SDK_SERVICE
    title: SdkComponentInstance
  SdkFunction:
    type: object
    properties:
      accessLevel:
        type: integer
        format: int32
      connectionPoints:
        type: array
        items:
          $ref: '#/definitions/ConnectionPoint'
      description:
        type: string
      flavourExpression:
        type: string
      id:
        type: integer
        format: int64
      instantiationLevelExpression:
        type: string
      maxInstancesCount:
        type: integer
        format: int32
      metadata:
        type: object
        additionalProperties:
          type: string
      minInstancesCount:
        type: integer
        format: int32
      monitoringParameters:
        type: array
        items:
          $ref: '#/definitions/MonitoringParameter'
      name:
        type: string
      ownerId:
        type: string
      parameters:
        type: array
        items:
          type: string
      requiredPorts:
        type: array
        items:
          $ref: '#/definitions/RequiredPort'
      sliceId:
        type: string
      status:
        type: string
        enum:
          - SAVED
          - CHANGING
          - COMMITTED
      swImageData:
        $ref: '#/definitions/SwImageData'
      vendor:
        type: string
      version:
        type: string
      visibility:
        type: string
        enum:
          - PUBLIC
          - PRIVATE
      vnfdId:
        type: string
    title: SdkFunction
  SdkFunctionDescriptor:
    title: SdkFunctionDescriptor
    allOf:
      - $ref: '#/definitions/SdkComponentInstance'
      - type: object
        properties:
          componentType:
            type: string
            enum:
              - SDK_FUNCTION
              - SDK_SERVICE
          id:
            type: integer
            format: int64
          template:
            $ref: '#/definitions/SdkFunction'
        title: SdkFunctionDescriptor
  SdkService:
    type: object
    properties:
      accessLevel:
        type: integer
        format: int32
      actionRules:
        type: array
        items:
          $ref: '#/definitions/ServiceActionRule'
      actions:
        type: array
        items:
          $ref: '#/definitions/ServiceAction'
      component:
        type: array
        items:
          $ref: '#/definitions/SdkServiceComponent'
      connectionPoints:
        type: array
        items:
          $ref: '#/definitions/ConnectionPoint'
      designer:
        type: string
      extMonitoringParameters:
        type: array
        items:
          $ref: '#/definitions/MonitoringParameter'
      id:
        type: string
      intMonitoringParameters:
        type: array
        items:
          $ref: '#/definitions/MonitoringParameter'
      l3Connectivity:
        type: array
        items:
          $ref: '#/definitions/L3Connectivity'
      license:
        $ref: '#/definitions/License'
      link:
        type: array
        items:
          $ref: '#/definitions/Link'
      metadata:
        type: object
        additionalProperties:
          type: string
      name:
        type: string
      ownerId:
        type: string
      parameters:
        type: array
        items:
          type: string
      sliceId:
        type: string
      version:
        type: string
      visibility:
        type: string
        enum:
          - PUBLIC
          - PRIVATE
    title: SdkService
  SdkServiceComponent:
    type: object
    properties:
      componentId:
        type: integer
        format: int64
      componentIndex:
        type: integer
        format: int32
      componentType:
        type: string
        enum:
          - SDK_FUNCTION
          - SDK_SERVICE
      id:
        type: integer
        format: int64
      mappingExpressions:
        type: array
        items:
          type: string
    title: SdkServiceComponent
  SdkServiceDescriptor:
    title: SdkServiceDescriptor
    allOf:
      - $ref: '#/definitions/SdkComponentInstance'
      - type: object
        properties:
          componentType:
            type: string
            enum:
              - SDK_FUNCTION
              - SDK_SERVICE
          id:
            type: integer
            format: int64
          parameters:
            type: object
            additionalProperties:
              type: number
          serviceId:
            type: integer
            format: int64
          sliceId:
            type: string
          status:
            type: string
            enum:
              - SAVED
              - CHANGING
              - COMMITTED
          subDescriptor:
            type: array
            items:
              $ref: '#/definitions/SdkComponentInstance'
        title: SdkServiceDescriptor
  ServiceAction:
    type: object
    properties:
      actionType:
        type: string
        enum:
          - SCALE_IN
          - SCALE_OUT
          - COMPONENT
      componentIndex:
        type: string
      id:
        type: string
      name:
        type: string
    title: ServiceAction
  ServiceActionRule:
    type: object
    properties:
      actionsName:
        type: array
        items:
          type: string
      conditions:
        type: array
        items:
          $ref: '#/definitions/RuleCondition'
      duration:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      operator:
        type: string
        enum:
          - and
          - or
      severity:
        type: string
    title: ServiceActionRule
  SliceResource:
    type: object
    properties:
      id:
        type: integer
        format: int64
      sliceDescription:
        type: string
      sliceId:
        type: string
      users:
        type: array
        items:
          type: string
    title: SliceResource
  SubFunction:
    title: SubFunction
    allOf:
      - $ref: '#/definitions/SdkServiceComponent'
      - type: object
        properties:
          componentId:
            type: integer
            format: int64
          componentIndex:
            type: integer
            format: int32
          componentType:
            type: string
            enum:
              - SDK_FUNCTION
              - SDK_SERVICE
          id:
            type: integer
            format: int64
          mappingExpressions:
            type: array
            items:
              type: string
        title: SubFunction
  SubService:
    title: SubService
    allOf:
      - $ref: '#/definitions/SdkServiceComponent'
      - type: object
        properties:
          componentId:
            type: integer
            format: int64
          componentIndex:
            type: integer
            format: int32
          componentType:
            type: string
            enum:
              - SDK_FUNCTION
              - SDK_SERVICE
          id:
            type: integer
            format: int64
          mappingExpressions:
            type: array
            items:
              type: string
        title: SubService
  SwImageData:
    type: object
    properties:
      checksum:
        type: string
      containerFormat:
        type: string
      diskFormat:
        type: string
      imgName:
        type: string
      imgVersion:
        type: string
      minCpu:
        type: integer
        format: int32
      minDisk:
        type: integer
        format: int32
      minRam:
        type: integer
        format: int32
      size:
        type: integer
        format: int32
    title: SwImageData
