{
  "openapi": "3.0.0",
  "info": {
    "description": "ReST API for the 5G-City's SDK composer",
    "version": "0.0.1",
    "title": "5g-City SDK Composer REST API ",
    "contact": {
      "name": "Elian Kraja",
      "url": "http://www.nextworks.it",
      "email": "e.kraja@nextworks.it"
    },
    "license": {
      "name": "Apache License Version 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0\""
    }
  },
  "tags": [
    {
      "name": "function-instance-rest-controller",
      "description": "Operations on Composer Module - SDKFunctionInstance APIs"
    },
    {
      "name": "function-rest-controller",
      "description": "Operations on Composer Module - SDKFunction APIs"
    },
    {
      "name": "service-rest-controller",
      "description": "Operations on Composer Module - SDKService APIs"
    }
  ],
  "paths": {
    "/sdk/composer/functions": {
      "get": {
        "tags": [
          "function-rest-controller"
        ],
        "summary": "Get the complete list of the SDKFunctions available in database",
        "operationId": "getFunctionsUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SDKFunction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/functions/instances": {
      "get": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Get the complete list of the SDKFunctionsInstance available in database",
        "operationId": "getFunctionInstancesUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SDKFunctionInstance"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/functions/instances/{functionId}": {
      "get": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Search a SDKFunctionInstance with an UUID",
        "operationId": "getFunctionInstanceUsingGET",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SDKFunction"
                }
              }
            }
          },
          "400": {
            "description": "Query without parameter functionId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SDKFunctionInstance not found on database"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/functions/instances/{functionId}/flavour": {
      "put": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Modify the flavour for a SDKFunctionInstance",
        "operationId": "updateFlavourForFunctionUsingPUT",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Flavour Updated",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Function not present in db or request cannot be validated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "enum": [
                  "SMALL",
                  "MEDIUM",
                  "LARGE"
                ]
              }
            }
          },
          "description": "flavour",
          "required": true
        }
      }
    },
    "/sdk/composer/functions/instances/{functionId}/monitoringparams": {
      "get": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Get the list of  Monitoring Paramters for a given SDKFunctionInstance identified by UUID",
        "operationId": "getMonitoringParametersForFunctionUsingGET",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringParameter"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query without parameter functionId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SDKFunctionInstance not found on database"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Modify an existing list of monitoring parameters related to a given SDKFunctionInstance",
        "operationId": "updateMonitoringParametersForFunctionUsingPUT",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Monitoring Param list Updated",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Function not present in db or request cannot be validated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/MonitoringParameterArray"
        }
      },
      "delete": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Delete monitoring param list from SDKFunctionInstance",
        "operationId": "deleteMonitoringParametersForFunctionUsingDELETE",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Deletion request without parameter functionId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Entity to be deleted not found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/MonitoringParameterArray"
        }
      }
    },
    "/sdk/composer/functions/{functionId}": {
      "get": {
        "tags": [
          "function-rest-controller"
        ],
        "summary": "Search a SDKFunction with an UUID",
        "operationId": "getFunctionUsingGET",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SDKFunction"
                }
              }
            }
          },
          "400": {
            "description": "Query without parameter functionId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SDKFunction not found on database"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/functions/{functionId}/instances": {
      "get": {
        "tags": [
          "function-instance-rest-controller"
        ],
        "summary": "Get the complete list of the SDKFunctionsInstance available in database for a given SDK Function",
        "operationId": "getFunctionInstancesPerFunctionUsingGET",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "functionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SDKFunctionInstance"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/services": {
      "get": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Get the complete list of the SDKServices available in database",
        "operationId": "getServicesUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SDKService"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Create a new Service",
        "operationId": "createServiceUsingPOST",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Service Created",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Service already present in db or service cannot be validated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/SDKService"
        }
      },
      "put": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Modify an existing Service",
        "operationId": "updateServiceUsingPUT",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Service Updated",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Service not present in db or service cannot be validated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/SDKService"
        }
      }
    },
    "/sdk/composer/services/{serviceId}": {
      "get": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Search a SDKService with an UUID",
        "operationId": "getServiceUsingGET",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SDKService"
                }
              }
            }
          },
          "400": {
            "description": "Query without parameter serviceId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SDKService not found on database"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Delete Service From database",
        "operationId": "deleteServiceUsingDELETE",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Deletion request without parameter serviceId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Entity to be deleted not found"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/services/{serviceId}/monitoringparams": {
      "get": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Get the list of  Monitoring Paramters for a given SDKService identified by UUID",
        "operationId": "getMonitoringParametersForServiceUsingGET",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringParameter"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query without parameter serviceId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SDKService not found on database"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Modify an existing list of monitoring parameters related to a given SDKService",
        "operationId": "updateMonitoringParametersForServiceUsingPUT",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Monitoring Param list Updated",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Service not present in db or request cannot be validated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/MonitoringParameterArray"
        }
      },
      "delete": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Delete monitoring param list from SDKService",
        "operationId": "deleteMonitoringParametersForServiceUsingDELETE",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Deletion request without parameter serviceId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Entity to be deleted not found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/MonitoringParameterArray"
        }
      }
    },
    "/sdk/composer/services/{serviceId}/publish": {
      "put": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Publish Service to Public Catalogue",
        "operationId": "publishServiceUsingPUT",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "The service will be published to the public catalogue",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Publication request without parameter serviceId or already published service"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Entity to be published not found"
          }
        },
        "deprecated": false
      }
    },
    "/sdk/composer/services/{serviceId}/scalingaspects": {
      "get": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Get the list of  ScalingAspects for a given SDKService identified by UUID",
        "operationId": "getScalingAspectsForServiceUsingGET",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScalingAspect"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query without parameter serviceId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "SDKService not found on database"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Modify an existing list of scaling aspects",
        "operationId": "updateScalingAspectsUsingPUT",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "ScalingAspects Updated",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Service not present in db or request cannot be validated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/ScalingAspectArray"
        }
      },
      "delete": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Delete ScalingAspect list from SDKService",
        "operationId": "deleteScalingAspectsUsingDELETE",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Deletion request without parameter serviceId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Entity to be deleted not found"
          }
        },
        "deprecated": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/ScalingAspectArray"
        }
      }
    },
    "/sdk/composer/services/{serviceId}/unpublish": {
      "put": {
        "tags": [
          "service-rest-controller"
        ],
        "summary": "Unpublish Service from Public Catalogue",
        "operationId": "unPublishServiceUsingPUT",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "The service will be removed from the public catalogue",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Request without parameter serviceId or not yet published service"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Entity to be unpublished not found"
          }
        },
        "deprecated": false
      }
    }
  },
  "servers": [
    {
      "url": "//localhost:8081/"
    }
  ],
  "components": {
    "requestBodies": {
      "MonitoringParameterArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MonitoringParameter"
              }
            }
          }
        },
        "description": "monitoringParameters",
        "required": true
      },
      "SDKService": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SDKService"
            }
          }
        },
        "description": "request",
        "required": true
      },
      "ScalingAspectArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScalingAspect"
              }
            }
          }
        },
        "description": "scalingAspects",
        "required": true
      }
    },
    "schemas": {
      "ConnectionPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ]
          }
        },
        "title": "ConnectionPoint"
      },
      "L3ConnectivityProperty": {
        "type": "object",
        "properties": {
          "dst_ip": {
            "type": "string"
          },
          "dst_port": {
            "type": "integer",
            "format": "int32"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "UDP",
              "TCP",
              "ICMP"
            ]
          },
          "src_ip": {
            "type": "string"
          },
          "src_port": {
            "type": "integer",
            "format": "int32"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "title": "L3ConnectivityProperty"
      },
      "License": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "PUBLIC"
            ]
          },
          "url": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "title": "License"
      },
      "Link": {
        "type": "object",
        "properties": {
          "connection_point_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "l3_property": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/L3ConnectivityProperty"
            }
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL"
            ]
          }
        },
        "title": "Link"
      },
      "MonitoringParameter": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "enum": [
              "GREATER_THAN",
              "LOWER_THAN"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "enum": [
              "AVERAGE_MEMORY_UTILIZATION"
            ]
          },
          "threshold": {
            "type": "number",
            "format": "float"
          }
        },
        "title": "MonitoringParameter"
      },
      "SDKFunction": {
        "type": "object",
        "properties": {
          "connection_point": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionPoint"
            }
          },
          "description": {
            "type": "string"
          },
          "flavours": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SMALL",
                "MEDIUM",
                "LARGE"
              ]
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "monitoring_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringParameter"
            }
          },
          "name": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "title": "SDKFunction"
      },
      "SDKFunctionInstance": {
        "type": "object",
        "properties": {
          "flavour": {
            "type": "string",
            "enum": [
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "function_id": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "monitoring_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringParameter"
            }
          }
        },
        "title": "SDKFunctionInstance"
      },
      "SDKService": {
        "type": "object",
        "properties": {
          "descriptor": {
            "type": "string"
          },
          "designer": {
            "type": "string"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDKFunctionInstance"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "link": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "monitoring_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringParameter"
            }
          },
          "name": {
            "type": "string"
          },
          "scaling_aspect": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScalingAspect"
            }
          },
          "scaling_ratio": {
            "type": "string",
            "enum": [
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "SAVED",
              "COMMITTED"
            ]
          },
          "version": {
            "type": "string"
          }
        },
        "title": "SDKService"
      },
      "ScalingAspect": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "SCALE_UP",
              "SCALE_DOWN",
              "SCALE_IN",
              "SCALE_OUT"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "monitoring_parameter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringParameter"
            }
          },
          "name": {
            "type": "string"
          }
        },
        "title": "ScalingAspect"
      }
    }
  }
}
